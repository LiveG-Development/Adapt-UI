{"ui.components.Label": {"shortDescription": "Label class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "any", "name": "children", "description": "Children or content to include in component. Default: `[]`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Has similar properties to an HTML `label` element."}, "ui.components.Component( ... ).precompute": {"shortDescription": "Precompute DOM values for generation.", "return": {"type": "object", "description": "Newly computed DOM object."}, "params": [{"type": "object", "name": "domObject", "description": "DOM object to use for precomputing."}], "longDescription": ""}, "ui.colour.RGBA": {"shortDescription": "RGBA class for use with colours.", "return": {}, "params": [{"type": "number", "name": "red", "description": "Amount of red to use in colour. Must be between 0 and 255 inclusive."}, {"type": "number", "name": "green", "description": "Amount of green to use in colour. Must be between 0 and 255 inclusive."}, {"type": "number", "name": "blue", "description": "Amount of blue to use in colour. Must be between 0 and 255 inclusive."}, {"type": "number", "name": "alpha", "description": "Amount of alpha transparency colour should have. Must be between 0 and 1 inclusive. Default: `1`."}], "longDescription": ""}, "ui.components.Component": {"shortDescription": "Blank component class.", "return": {}, "params": [{"type": "any", "name": "children", "description": "Children or content to include in component. Default: `[]`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": ""}, "ui.components.Paragraph": {"shortDescription": "Paragraph class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "any", "name": "children", "description": "Children or content to include in component. Default: `[]`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Has similar properties to an HTML `p` element."}, "ui.components.Container": {"shortDescription": "Container class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "any", "name": "children", "description": "Children or content to include in component. Default: `[]`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Has similar properties to an HTML `div` element."}, "ui.components.RadioButtonInput": {"shortDescription": "RadioButtonInput class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "string", "name": "group", "description": "Name of group to group radio buttons in. Default: `\"\"`."}, {"type": "boolean", "name": "selected", "description": "Whether to make the input selected. Use `true` to enable. Default: `false`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Has similar properties to an HTML `input` element with attrbute `type` as `\"radio\"`."}, "ui.components.Text": {"shortDescription": "Text class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "string", "name": "text", "description": "Text to use. Default: `\"\"`."}], "longDescription": ""}, "ui.components.TextItalicsEffect": {"shortDescription": "TextItalicsEffect class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "any", "name": "children", "description": "Children or content to include in component. Default: `[]`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Displays text in italics. Has similar properties to an HTML `em` element."}, "ui.components.PasswordInput": {"shortDescription": "PasswordInput class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "string", "name": "value", "description": "Initial value to store in input. Default: `\"\"`."}, {"type": "string", "name": "placeholder", "description": "Value to show in input if it is empty. Default: `\"\"`."}, {"type": "boolean", "name": "secondary", "description": "Whether to make the input secondary. Use `true` to enable. Default: `false`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"password\"`."}, "ui.Vector": {"shortDescription": "Vector class for use with dimensions in terms of position and size.", "return": {}, "params": [{"type": "X", "name": "x", "description": "position or width of vector."}, {"type": "Y", "name": "y", "description": "position or height of vector."}], "longDescription": ""}, "ui.components.TextBoldEffect": {"shortDescription": "TextBoldEffect class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "any", "name": "children", "description": "Children or content to include in component. Default: `[]`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Displays text in bold. Has similar properties to an HTML `strong` element."}, "ui.refresh": {"shortDescription": "Regenerate the DOM to reflect the UI layout in `ui.screen`.", "return": {}, "params": [], "longDescription": ""}, "ui.components.TextInput": {"shortDescription": "TextInput class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "string", "name": "value", "description": "Initial value to store in input. Default: `\"\"`."}, {"type": "string", "name": "placeholder", "description": "Value to show in input if it is empty. Default: `\"\"`."}, {"type": "boolean", "name": "secondary", "description": "Whether to make the input secondary. Use `true` to enable. Default: `false`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Has similar properties to an HTML `input` element."}, "ui.components.Component( ... ).generateDOMElement": {"shortDescription": "Generate DOM element for component.", "return": {"type": "object", "description": "Dictionary of available functions and values for generated DOM element."}, "params": [], "longDescription": ""}, "ui.components.HTML": {"shortDescription": "HTML class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "text", "name": "html", "description": "HTML contents to use. Default: `\"\"`."}], "longDescription": ""}, "ui.utilities.getScreenSize": {"shortDescription": "Get the screen (viewport)'s size in pixels.", "return": {"type": "object", "description": "Vector class of screen size."}, "params": [], "longDescription": ""}, "ui.components.ToggleSwitch": {"shortDescription": "ToggleSwitch class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "string", "name": "group", "description": "Name of group to group toggle switches in. Default: `\"\"`."}, {"type": "boolean", "name": "selected", "description": "Whether to make the switch selected. Use `true` to enable. Default: `false`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Has similar properties to an HTML `input` element with attrbute `type` as `\"checkbox\"`."}, "ui.components.Component( ... ).generateHTML": {"shortDescription": "Generate HTML contents for component.", "return": {"type": "string", "description": "HTML contents of component."}, "params": [], "longDescription": ""}, "ui.components.Button": {"shortDescription": "Button class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "any", "name": "children", "description": "Children or content to include in component. Default: `[]`."}, {"type": "boolean", "name": "secondary", "description": "Whether to make the button secondary. Use `true` to enable. Default: `false`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Has similar properties to an HTML `button` element."}, "ui.components.SelectionInput": {"shortDescription": "SelectionInput class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "object", "name": "candidates", "description": "Candidates to display in input. Default: `{}`."}, {"type": "string", "name": "selected", "description": "Candidate key for selected candidate. Default: `\"\"`."}, {"type": "boolean", "name": "secondary", "description": "Whether to make the input secondary. Use `true` to enable. Default: `false`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`"}], "longDescription": "Has similar properties to an HTML `select` element with `option` children.\nHas similar properties to an HTML `select` element with children as element `option`."}, "ui.components.Heading": {"shortDescription": "Heading class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "any", "name": "children", "description": "Children or content to include in component. Default: `[]`."}, {"type": "number", "name": "level", "description": "Level number to use for heading. Must be an integer between 1 and 6 inclusive. Default: `1`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Has similar properties to the HTML `h1`, `h2`, `h3`, `h4`, `h5` and `h6` elements."}, "ui.components.CheckboxInput": {"shortDescription": "CheckboxInput class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "string", "name": "group", "description": "Name of group to group checkboxes in. Default: `\"\"`."}, {"type": "boolean", "name": "selected", "description": "Whether to make the input selected. Use `true` to enable, or `null` to make indeterminate. Default: `false`."}, {"type": "object", "name": "style", "description": "Styling to use on component. Default: `{}`."}, {"type": "object", "name": "attributes", "description": "HTML attributes to use on component. Default: `{}`."}, {"type": "object", "name": "events", "description": "Events to listen to on component. Default: `{}`."}], "longDescription": "Has similar properties to an HTML `input` element with attrbute `type` as `\"checkbox\"`."}, "ui.components.Icon": {"shortDescription": "Icon class, extends `ui.components.Component`.", "return": {}, "params": [{"type": "string", "name": "name", "description": "Name of icon to use."}], "longDescription": "Uses icons from from the Clarity icon set. An `i` element is generated."}, "ui.events.loaded": {"shortDescription": "Call callback function when main UI container has loaded.", "return": {}, "params": [{"type": "function", "name": "callback", "description": "Callback function to call when main UI container has loaded."}], "longDescription": ""}}