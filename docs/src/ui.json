{"ui.components.Paragraph": {"longDescription": "Has similar properties to an HTML `p` element.", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "Paragraph class, extends `ui.components.Component`."}, "ui.components.Icon": {"longDescription": "Uses icons from from the Clarity icon set. An `i` element is generated.", "return": {}, "params": [{"name": "name", "description": "Name of icon to use.", "type": "string"}, {"name": "description", "description": "Description of icon for accessibility. Default: `\"\"`.", "type": "string"}], "shortDescription": "Icon class, extends `ui.components.Component`."}, "ui.components.PasswordInput": {"longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"password\"`.", "return": {}, "params": [{"name": "value", "description": "Initial value to store in input. Default: `\"\"`.", "type": "string"}, {"name": "placeholder", "description": "Value to show in input if it is empty. Default: `\"\"`.", "type": "string"}, {"name": "secondary", "description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "type": "boolean"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "PasswordInput class, extends `ui.components.TextInput`."}, "ui.components.Component( ... ).generateDOMElement": {"longDescription": "", "return": {"description": "Dictionary of available functions and values for generated DOM element.", "type": "object"}, "params": [], "shortDescription": "Generate DOM element for component."}, "ui.components.Container": {"longDescription": "Has similar properties to an HTML `div` element.", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "split", "description": "Numerator of a twelth fraction used to split container by width. Must be between 1 and 12 inclusive. Default: `12`.", "type": "number"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "Container class, extends `ui.components.Component`."}, "ui.components.TextItalicsEffect": {"longDescription": "Displays text in italics. Has similar properties to an HTML `em` element.", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "TextItalicsEffect class, extends `ui.components.Component`."}, "ui.components.SliderInput": {"longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"range\"`.", "return": {}, "params": [{"name": "value", "description": "Initial value to store in input. Must be between 0 and 1 inclusive. Default: `0`.", "type": "number"}, {"name": "step", "description": "Amount to step when slider is moved. Must be between 0 and 1 inclusive. Default: `1`.", "type": "number"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "SliderInput class, extends `ui.components.Component`."}, "ui.components.SelectionInput": {"longDescription": "Has similar properties to an HTML `select` element with `option` children.\nHas similar properties to an HTML `select` element with children as element `option`.", "return": {}, "params": [{"name": "candidates", "description": "Candidates to display in input. Default: `{}`.", "type": "object"}, {"name": "selected", "description": "Candidate key for selected candidate. Default: `\"\"`.", "type": "string"}, {"name": "secondary", "description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "type": "boolean"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`", "type": "object"}], "shortDescription": "SelectionInput class, extends `ui.components.Component`."}, "ui.components.GroupContainer": {"longDescription": "Has similar properties to an HTML `div` element with attribute `group`.\nDesigned to group alike form elements already in a `Container`.", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "GroupContainer class, extends `ui.components.Container`."}, "ui.components.Component( ... ).precompute": {"longDescription": "", "return": {"description": "Newly computed DOM object.", "type": "object"}, "params": [{"name": "domObject", "description": "DOM object to use for precomputing.", "type": "object"}], "shortDescription": "Precompute DOM values for generation."}, "ui.components.Card": {"longDescription": "Has similar properties to an HTML `div` element with attribute `card`.\nDesigned to hold elements in a more contextual setting.", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "split", "description": "Numerator of a twelth fraction used to split card by width. Must be between 1 and 12 inclusive. Default: `12`.", "type": "number"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "Card class, extends `ui.components.Container`."}, "ui.components.TextBoldEffect": {"longDescription": "Displays text in bold. Has similar properties to an HTML `strong` element.", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "TextBoldEffect class, extends `ui.components.Component`."}, "ui.components.Text": {"longDescription": "", "return": {}, "params": [{"name": "text", "description": "Text to use. Default: `\"\"`.", "type": "string"}], "shortDescription": "Text class, extends `ui.components.Component`."}, "ui.components.Component( ... ).generateHTML": {"longDescription": "", "return": {"description": "HTML contents of component.", "type": "string"}, "params": [], "shortDescription": "Generate HTML contents for component."}, "ui.components.SpinnerLoader": {"longDescription": "Used for when an object has no definite final loading time.", "return": {}, "params": [{"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "SpinnerLoader class, extends `ui.components.Component`."}, "ui.colour.RGBA": {"longDescription": "", "return": {}, "params": [{"name": "red", "description": "Amount of red to use in colour. Must be between 0 and 255 inclusive.", "type": "number"}, {"name": "green", "description": "Amount of green to use in colour. Must be between 0 and 255 inclusive.", "type": "number"}, {"name": "blue", "description": "Amount of blue to use in colour. Must be between 0 and 255 inclusive.", "type": "number"}, {"name": "alpha", "description": "Amount of alpha transparency colour should have. Must be between 0 and 1 inclusive. Default: `1`.", "type": "number"}], "shortDescription": "RGBA class for use with colours."}, "ui.components.RadioButtonInput": {"longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"radio\"`.", "return": {}, "params": [{"name": "group", "description": "Name of group to group radio buttons in. Default: `\"\"`.", "type": "string"}, {"name": "selected", "description": "Whether to make the input selected. Use `true` to enable. Default: `false`.", "type": "boolean"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "RadioButtonInput class, extends `ui.components.Component`."}, "ui.components.TextInput": {"longDescription": "Has similar properties to an HTML `input` element.", "return": {}, "params": [{"name": "value", "description": "Initial value to store in input. Default: `\"\"`.", "type": "string"}, {"name": "placeholder", "description": "Value to show in input if it is empty. Default: `\"\"`.", "type": "string"}, {"name": "secondary", "description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "type": "boolean"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "TextInput class, extends `ui.components.Component`."}, "ui.events.loaded": {"longDescription": "", "return": {}, "params": [{"name": "callback", "description": "Callback function to call when main UI container has loaded.", "type": "function"}], "shortDescription": "Call callback function when main UI container has loaded."}, "ui.components.CheckboxInput": {"longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"checkbox\"`.", "return": {}, "params": [{"name": "group", "description": "Name of group to group checkboxes in. Default: `\"\"`.", "type": "string"}, {"name": "selected", "description": "Whether to make the input selected. Use `true` to enable, or `null` to make indeterminate. Default: `false`.", "type": "boolean"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "CheckboxInput class, extends `ui.components.Component`."}, "ui.Vector": {"longDescription": "", "return": {}, "params": [{"name": "x", "description": "position or width of vector.", "type": "X"}, {"name": "y", "description": "position or height of vector.", "type": "Y"}], "shortDescription": "Vector class for use with dimensions in terms of position and size."}, "ui.components.Label": {"longDescription": "Has similar properties to an HTML `label` element.", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "Label class, extends `ui.components.Component`."}, "ui.components.ToggleSwitch": {"longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"checkbox\"` and `role` as `\"switch\"`.", "return": {}, "params": [{"name": "group", "description": "Name of group to group toggle switches in. Default: `\"\"`.", "type": "string"}, {"name": "selected", "description": "Whether to make the switch selected. Use `true` to enable. Default: `false`.", "type": "boolean"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "ToggleSwitch class, extends `ui.components.Component`."}, "ui.components.Pill": {"longDescription": "Has similar properties to an HTML `button` element with attribute `role` as `\"tab\"`.", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "selected", "description": "Whether to make the pill selected. Use `true` to enable. Default: `false`.", "type": "boolean"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "Pill class, extends `ui.components.Component`."}, "ui.refresh": {"longDescription": "", "return": {}, "params": [], "shortDescription": "Regenerate the DOM to reflect the UI layout in `ui.screen`."}, "ui.components.Button": {"longDescription": "Has similar properties to an HTML `button` element.", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "secondary", "description": "Whether to make the button secondary. Use `true` to enable. Default: `false`.", "type": "boolean"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "Button class, extends `ui.components.Component`."}, "ui.components.Link": {"longDescription": "", "return": {}, "params": [{"name": "text", "description": "Text to use in link. Default: `\"\"`.", "type": "string"}, {"name": "destination", "description": "Destination that link goes to. Default: `\"#\"`.", "type": "string"}, {"name": "detach", "description": "Whether to make link destination open in new window or browser tab. Default: `true`.", "type": "boolean"}], "shortDescription": "Link class, extends `ui.components.Component`."}, "ui.components.Heading": {"longDescription": "Has similar properties to the HTML `h1`, `h2`, `h3`, `h4`, `h5` and `h6` elements.", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "level", "description": "Level number to use for heading. Must be an integer between 1 and 6 inclusive. Default: `1`.", "type": "number"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "Heading class, extends `ui.components.Component`."}, "ui.components.Component": {"longDescription": "", "return": {}, "params": [{"name": "children", "description": "Children or content to include in component. Default: `[]`.", "type": "any"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "Blank component class."}, "ui.components.ProgressBar": {"longDescription": "Has similar properties to an HTML `progress` element.", "return": {}, "params": [{"name": "value", "description": "Initial value to store in input. Must be between 0 and 1 inclusive. Default: `0`.", "type": "number"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "ProgressBar class, extends `ui.components.Component`."}, "ui.components.FormattedInput": {"longDescription": "Has similar properties to an HTML `input` element.", "return": {}, "params": [{"name": "value", "description": "Initial value to store in input. Default: `\"\"`.", "type": "string"}, {"name": "placeholder", "description": "Value to show in input if it is empty. Default: `\"\"`.", "type": "string"}, {"name": "secondary", "description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "type": "boolean"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "FormattedInput class, extends `ui.components.TextInput`."}, "ui.components.HTML": {"longDescription": "", "return": {}, "params": [{"name": "html", "description": "HTML contents to use. Default: `\"\"`.", "type": "text"}], "shortDescription": "HTML class, extends `ui.components.Component`."}, "ui.components.Image": {"longDescription": "Has similar properties to an HTML `img` element.", "return": {}, "params": [{"name": "source", "description": "Source that image is taken from.", "type": "string"}, {"name": "description", "description": "Alternative description of image if it doesn't load or can't be seen by the user. Default: `\"\"`.", "type": "string"}, {"name": "style", "description": "Styling to use on component. Default: `{}`.", "type": "object"}, {"name": "attributes", "description": "HTML attributes to use on component. Default: `{}`.", "type": "object"}, {"name": "events", "description": "Events to listen to on component. Default: `{}`.", "type": "object"}], "shortDescription": "Image class, extends `ui.components.Component`."}, "ui.utilities.getScreenSize": {"longDescription": "", "return": {"description": "Vector class of screen size.", "type": "object"}, "params": [], "shortDescription": "Get the screen (viewport)'s size in pixels."}}