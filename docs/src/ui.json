{"ui.components.Container": {"params": [{"type": "any", "description": "Children or content to include in component. Default: `[]`.", "name": "children"}, {"type": "object", "description": "Styling to use on component. Default: `{}`.", "name": "style"}, {"type": "object", "description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes"}, {"type": "object", "description": "Events to listen to on component. Default: `{}`.", "name": "events"}], "shortDescription": "Container class, extends `ui.components.Component`.", "return": {}, "longDescription": "Has similar properties to an HTML `div` element."}, "ui.components.TextInput": {"params": [{"type": "string", "description": "Initial value to store in input. Default: `\"\"`.", "name": "value"}, {"type": "string", "description": "Value to show in input if it is empty. Default: `\"\"`.", "name": "placeholder"}, {"type": "object", "description": "Styling to use on component. Default: `{}`.", "name": "style"}, {"type": "object", "description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes"}, {"type": "object", "description": "Events to listen to on component. Default: `{}`.", "name": "events"}], "shortDescription": "Button class, extends `ui.components.Component`.", "return": {}, "longDescription": "Has similar properties to an HTML `input` element."}, "ui.components.Paragraph": {"params": [{"type": "any", "description": "Children or content to include in component. Default: `[]`.", "name": "children"}, {"type": "object", "description": "Styling to use on component. Default: `{}`.", "name": "style"}, {"type": "object", "description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes"}, {"type": "object", "description": "Events to listen to on component. Default: `{}`.", "name": "events"}], "shortDescription": "Paragraph class, extends `ui.components.Component`.", "return": {}, "longDescription": "Has similar properties to an HTML `p` element."}, "ui.components.Icon": {"params": [{"type": "string", "description": "Name of icon to use.", "name": "name"}], "shortDescription": "Icon class, extends `ui.components.Component`.", "return": {}, "longDescription": "Uses icons from from the Clarity icon set. An `i` element is generated."}, "ui.components.Component( ... ).precompute": {"params": [{"type": "object", "description": "DOM object to use for precomputing.", "name": "domObject"}], "shortDescription": "Precompute DOM values for generation.", "return": {"type": "object", "description": "Newly computed DOM object."}, "longDescription": ""}, "ui.components.Heading": {"params": [{"type": "any", "description": "Children or content to include in component. Default: `[]`.", "name": "children"}, {"type": "number", "description": "Level number to use for heading. Must be an integer between 1 and 6 inclusive. Default: `1`.", "name": "level"}, {"type": "object", "description": "Styling to use on component. Default: `{}`.", "name": "style"}, {"type": "object", "description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes"}, {"type": "object", "description": "Events to listen to on component. Default: `{}`.", "name": "events"}], "shortDescription": "Heading class, extends `ui.components.Component`.", "return": {}, "longDescription": "Has similar properties to the HTML `h1`, `h2`, `h3`, `h4`, `h5` and `h6` elements."}, "ui.events.loaded": {"params": [{"type": "function", "description": "Callback function to call when main UI container has loaded.", "name": "callback"}], "shortDescription": "Call callback function when main UI container has loaded.", "return": {}, "longDescription": ""}, "ui.refresh": {"params": [], "shortDescription": "Regenerate the DOM to reflect the UI layout in `ui.screen`.", "return": {}, "longDescription": ""}, "ui.components.Component( ... ).generateHTML": {"params": [], "shortDescription": "Generate HTML contents for component.", "return": {"type": "string", "description": "HTML contents of component."}, "longDescription": ""}, "ui.components.TextItalicsEffect": {"params": [{"type": "any", "description": "Children or content to include in component. Default: `[]`.", "name": "children"}, {"type": "object", "description": "Styling to use on component. Default: `{}`.", "name": "style"}, {"type": "object", "description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes"}, {"type": "object", "description": "Events to listen to on component. Default: `{}`.", "name": "events"}], "shortDescription": "TextBoldEffect, extends `ui.components.Component`.", "return": {}, "longDescription": "Displays text in italics. Has similar properties to an HTML `em` element."}, "ui.components.Component( ... ).generateDOMElement": {"params": [], "shortDescription": "Generate DOM element for component.", "return": {"type": "object", "description": "Dictionary of available functions and values for generated DOM element."}, "longDescription": ""}, "ui.utilities.getScreenSize": {"params": [], "shortDescription": "Get the screen (viewport)'s size in pixels.", "return": {"type": "object", "description": "Vector class of screen size."}, "longDescription": ""}, "ui.Vector": {"params": [{"type": "X", "description": "position or width of vector.", "name": "x"}, {"type": "Y", "description": "position or height of vector.", "name": "y"}], "shortDescription": "Vector class for use with dimensions in terms of position and size.", "return": {}, "longDescription": ""}, "ui.components.Component": {"params": [{"type": "any", "description": "Children or content to include in component. Default: `[]`.", "name": "children"}, {"type": "object", "description": "Styling to use on component. Default: `{}`.", "name": "style"}, {"type": "object", "description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes"}, {"type": "object", "description": "Events to listen to on component. Default: `{}`.", "name": "events"}], "shortDescription": "Blank component class.", "return": {}, "longDescription": ""}, "ui.components.HTML": {"params": [{"type": "text", "description": "HTML contents to use.", "name": "html"}], "shortDescription": "HTML class, extends `ui.components.Component`.", "return": {}, "longDescription": ""}, "ui.components.Button": {"params": [{"type": "any", "description": "Children or content to include in component. Default: `[]`.", "name": "children"}, {"type": "boolean", "description": "Whether to make the button secondary. Use `true` to enable. Default: `false`.", "name": "secondary"}, {"type": "object", "description": "Styling to use on component. Default: `{}`.", "name": "style"}, {"type": "object", "description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes"}, {"type": "object", "description": "Events to listen to on component. Default: `{}`.", "name": "events"}], "shortDescription": "Button class, extends `ui.components.Component`.", "return": {}, "longDescription": "Has similar properties to an HTML `button` element."}, "ui.components.Text": {"params": [{"type": "string", "description": "Text to use.", "name": "text"}], "shortDescription": "Text class, extends `ui.components.Component`.", "return": {}, "longDescription": ""}, "ui.components.TextBoldEffect": {"params": [{"type": "any", "description": "Children or content to include in component. Default: `[]`.", "name": "children"}, {"type": "object", "description": "Styling to use on component. Default: `{}`.", "name": "style"}, {"type": "object", "description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes"}, {"type": "object", "description": "Events to listen to on component. Default: `{}`.", "name": "events"}], "shortDescription": "TextBoldEffect, extends `ui.components.Component`.", "return": {}, "longDescription": "Displays text in bold. Has similar properties to an HTML `strong` element."}, "ui.colour.RGBA": {"params": [{"type": "number", "description": "Amount of red to use in colour. Must be between 0 and 255 inclusive.", "name": "red"}, {"type": "number", "description": "Amount of green to use in colour. Must be between 0 and 255 inclusive.", "name": "green"}, {"type": "number", "description": "Amount of blue to use in colour. Must be between 0 and 255 inclusive.", "name": "blue"}, {"type": "number", "description": "Amount of alpha transparency colour should have. Must be between 0 and 1 inclusive. Default: `1`.", "name": "alpha"}], "shortDescription": "RGBA class for use with colours.", "return": {}, "longDescription": ""}}