{"ui.components.Component( ... ).generateHTML": {"params": [], "shortDescription": "Generate HTML contents for component.", "longDescription": "", "return": {"type": "string", "description": "HTML contents of component."}}, "ui.components.Icon": {"params": [{"name": "name", "type": "string", "description": "Name of icon to use."}], "shortDescription": "Icon class, extends `ui.components.Component`.", "longDescription": "Uses icons from from the Clarity icon set. An `i` element is generated.", "return": {}}, "ui.components.Heading": {"params": [{"name": "children", "type": "any", "description": "Children or content to include in component. Default: `[]`."}, {"name": "level", "type": "number", "description": "Level number to use for heading. Must be an integer between 1 and 6 inclusive. Default: `1`."}, {"name": "style", "type": "object", "description": "Styling to use on component. Default: `{}`."}, {"name": "attributes", "type": "object", "description": "HTML attributes to use on component. Default: `{}`."}, {"name": "events", "type": "object", "description": "Events to listen to on component. Default: `{}`."}], "shortDescription": "Heading class, extends `ui.components.Component`.", "longDescription": "Has similar properties to the HTML `h1`, `h2`, `h3`, `h4`, `h5` and `h6` elements.", "return": {}}, "ui.components.Component( ... ).generateDOMElement": {"params": [], "shortDescription": "Generate DOM element for component.", "longDescription": "", "return": {"type": "object", "description": "Dictionary of available functions and values for generated DOM element."}}, "ui.components.HTML": {"params": [{"name": "html", "type": "text", "description": "HTML contents to use."}], "shortDescription": "HTML class, extends `ui.components.Component`.", "longDescription": "", "return": {}}, "ui.components.Component": {"params": [{"name": "children", "type": "any", "description": "Children or content to include in component. Default: `[]`."}, {"name": "style", "type": "object", "description": "Styling to use on component. Default: `{}`."}, {"name": "attributes", "type": "object", "description": "HTML attributes to use on component. Default: `{}`."}, {"name": "events", "type": "object", "description": "Events to listen to on component. Default: `{}`."}], "shortDescription": "Blank component class.", "longDescription": "", "return": {}}, "ui.components.Container": {"params": [{"name": "children", "type": "any", "description": "Children or content to include in component. Default: `[]`."}, {"name": "style", "type": "object", "description": "Styling to use on component. Default: `{}`."}, {"name": "attributes", "type": "object", "description": "HTML attributes to use on component. Default: `{}`."}, {"name": "events", "type": "object", "description": "Events to listen to on component. Default: `{}`."}], "shortDescription": "Container class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `div` element.", "return": {}}, "ui.events.loaded": {"params": [{"name": "callback", "type": "function", "description": "Callback function to call when main UI container has loaded."}], "shortDescription": "Call callback function when main UI container has loaded.", "longDescription": "", "return": {}}, "ui.refresh": {"params": [], "shortDescription": "Regenerate the DOM to reflect the UI layout in `ui.screen`.", "longDescription": "", "return": {}}, "ui.components.Paragraph": {"params": [{"name": "children", "type": "any", "description": "Children or content to include in component. Default: `[]`."}, {"name": "style", "type": "object", "description": "Styling to use on component. Default: `{}`."}, {"name": "attributes", "type": "object", "description": "HTML attributes to use on component. Default: `{}`."}, {"name": "events", "type": "object", "description": "Events to listen to on component. Default: `{}`."}], "shortDescription": "Paragraph class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `p` element.", "return": {}}, "ui.colour.RGBA": {"params": [{"name": "red", "type": "number", "description": "Amount of red to use in colour. Must be between 0 and 255 inclusive."}, {"name": "green", "type": "number", "description": "Amount of green to use in colour. Must be between 0 and 255 inclusive."}, {"name": "blue", "type": "number", "description": "Amount of blue to use in colour. Must be between 0 and 255 inclusive."}, {"name": "alpha", "type": "number", "description": "Amount of alpha transparency colour should have. Must be between 0 and 1 inclusive. Default: `1`."}], "shortDescription": "RGBA class for use with colours.", "longDescription": "", "return": {}}, "ui.components.Text": {"params": [{"name": "text", "type": "string", "description": "Text to use."}], "shortDescription": "Text class, extends `ui.components.Component`.", "longDescription": "", "return": {}}, "ui.components.Button": {"params": [{"name": "children", "type": "any", "description": "Children or content to include in component. Default: `[]`."}, {"name": "secondary", "type": "boolean", "description": "Whether to make the button secondary. Use `true` to enable. Default: `false`."}, {"name": "style", "type": "object", "description": "Styling to use on component. Default: `{}`."}, {"name": "attributes", "type": "object", "description": "HTML attributes to use on component. Default: `{}`."}, {"name": "events", "type": "object", "description": "Events to listen to on component. Default: `{}`."}], "shortDescription": "Button class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `button` element.", "return": {}}}