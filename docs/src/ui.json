{"ui.components.ProgressBar": {"shortDescription": "ProgressBar class, extends `ui.components.Component`.", "params": [{"description": "Initial value to store in input. Must be between 0 and 1 inclusive. Default: `0`.", "name": "value", "type": "number"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `progress` element."}, "ui.components.PasswordInput": {"shortDescription": "PasswordInput class, extends `ui.components.TextInput`.", "params": [{"description": "Initial value to store in input. Default: `\"\"`.", "name": "value", "type": "string"}, {"description": "Value to show in input if it is empty. Default: `\"\"`.", "name": "placeholder", "type": "string"}, {"description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "name": "secondary", "type": "boolean"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"password\"`."}, "ui.events.loaded": {"shortDescription": "Call callback function when main UI container has loaded.", "params": [{"description": "Callback function to call when main UI container has loaded.", "name": "callback", "type": "function"}], "return": {}, "longDescription": ""}, "ui.components.Component( ... ).precompute": {"shortDescription": "Precompute DOM values for generation.", "params": [{"description": "DOM object to use for precomputing.", "name": "domObject", "type": "object"}], "return": {"type": "object", "description": "Newly computed DOM object."}, "longDescription": ""}, "ui.components.HTML": {"shortDescription": "HTML class, extends `ui.components.Component`.", "params": [{"description": "HTML contents to use. Default: `\"\"`.", "name": "html", "type": "text"}], "return": {}, "longDescription": ""}, "ui.utilities.getScreenSize": {"shortDescription": "Get the screen (viewport)'s size in pixels.", "params": [], "return": {"type": "object", "description": "Vector class of screen size."}, "longDescription": ""}, "ui.components.TextInput": {"shortDescription": "TextInput class, extends `ui.components.Component`.", "params": [{"description": "Initial value to store in input. Default: `\"\"`.", "name": "value", "type": "string"}, {"description": "Value to show in input if it is empty. Default: `\"\"`.", "name": "placeholder", "type": "string"}, {"description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "name": "secondary", "type": "boolean"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `input` element."}, "ui.components.Text": {"shortDescription": "Text class, extends `ui.components.Component`.", "params": [{"description": "Text to use. Default: `\"\"`.", "name": "text", "type": "string"}], "return": {}, "longDescription": ""}, "ui.components.Button": {"shortDescription": "Button class, extends `ui.components.Component`.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Whether to make the button secondary. Use `true` to enable. Default: `false`.", "name": "secondary", "type": "boolean"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `button` element."}, "ui.components.Label": {"shortDescription": "Label class, extends `ui.components.Component`.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `label` element."}, "ui.components.FormattedInput": {"shortDescription": "FormattedInput class, extends `ui.components.TextInput`.", "params": [{"description": "Initial value to store in input. Default: `\"\"`.", "name": "value", "type": "string"}, {"description": "Value to show in input if it is empty. Default: `\"\"`.", "name": "placeholder", "type": "string"}, {"description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "name": "secondary", "type": "boolean"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `input` element."}, "ui.components.Container": {"shortDescription": "Container class, extends `ui.components.Component`.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Numerator of a twelth fraction used to split container by width. Must be between 1 and 12 inclusive. Default: `12`.", "name": "split", "type": "number"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `div` element."}, "ui.colour.RGBA": {"shortDescription": "RGBA class for use with colours.", "params": [{"description": "Amount of red to use in colour. Must be between 0 and 255 inclusive.", "name": "red", "type": "number"}, {"description": "Amount of green to use in colour. Must be between 0 and 255 inclusive.", "name": "green", "type": "number"}, {"description": "Amount of blue to use in colour. Must be between 0 and 255 inclusive.", "name": "blue", "type": "number"}, {"description": "Amount of alpha transparency colour should have. Must be between 0 and 1 inclusive. Default: `1`.", "name": "alpha", "type": "number"}], "return": {}, "longDescription": ""}, "ui.components.Heading": {"shortDescription": "Heading class, extends `ui.components.Component`.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Level number to use for heading. Must be an integer between 1 and 6 inclusive. Default: `1`.", "name": "level", "type": "number"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to the HTML `h1`, `h2`, `h3`, `h4`, `h5` and `h6` elements."}, "ui.components.CheckboxInput": {"shortDescription": "CheckboxInput class, extends `ui.components.Component`.", "params": [{"description": "Name of group to group checkboxes in. Default: `\"\"`.", "name": "group", "type": "string"}, {"description": "Whether to make the input selected. Use `true` to enable, or `null` to make indeterminate. Default: `false`.", "name": "selected", "type": "boolean"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"checkbox\"`."}, "ui.components.SliderInput": {"shortDescription": "SliderInput class, extends `ui.components.Component`.", "params": [{"description": "Initial value to store in input. Must be between 0 and 1 inclusive. Default: `0`.", "name": "value", "type": "number"}, {"description": "Amount to step when slider is moved. Must be between 0 and 1 inclusive. Default: `1`.", "name": "step", "type": "number"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"range\"`."}, "ui.components.GroupContainer": {"shortDescription": "GroupContainer class, extends `ui.components.Container`.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `div` element with attribute `group`.\nDesigned to group alike form elements already in a `Container`."}, "ui.refresh": {"shortDescription": "Regenerate the DOM to reflect the UI layout in `ui.screen`.", "params": [], "return": {}, "longDescription": ""}, "ui.components.Card": {"shortDescription": "Card class, extends `ui.components.Container`.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Numerator of a twelth fraction used to split card by width. Must be between 1 and 12 inclusive. Default: `12`.", "name": "split", "type": "number"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `div` element with attribute `card`.\nDesigned to hold elements in a more contextual setting."}, "ui.Vector": {"shortDescription": "Vector class for use with dimensions in terms of position and size.", "params": [{"description": "position or width of vector.", "name": "x", "type": "X"}, {"description": "position or height of vector.", "name": "y", "type": "Y"}], "return": {}, "longDescription": ""}, "ui.components.Icon": {"shortDescription": "Icon class, extends `ui.components.Component`.", "params": [{"description": "Name of icon to use.", "name": "name", "type": "string"}, {"description": "Description of icon for accessibility. Default: `\"\"`.", "name": "description", "type": "string"}], "return": {}, "longDescription": "Uses icons from from the Clarity icon set. An `i` element is generated."}, "ui.components.Component": {"shortDescription": "Blank component class.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": ""}, "ui.components.Component( ... ).generateHTML": {"shortDescription": "Generate HTML contents for component.", "params": [], "return": {"type": "string", "description": "HTML contents of component."}, "longDescription": ""}, "ui.components.Link": {"shortDescription": "Link class, extends `ui.components.Component`.", "params": [{"description": "Text to use in link. Default: `\"\"`.", "name": "text", "type": "string"}, {"description": "Destination that link goes to. Default: `\"#\"`.", "name": "destination", "type": "string"}, {"description": "Whether to make link destination open in new window or browser tab. Default: `true`.", "name": "detach", "type": "boolean"}], "return": {}, "longDescription": ""}, "ui.components.SpinnerLoader": {"shortDescription": "SpinnerLoader class, extends `ui.components.Component`.", "params": [{"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Used for when an object has no definite final loading time."}, "ui.components.ToggleSwitch": {"shortDescription": "ToggleSwitch class, extends `ui.components.Component`.", "params": [{"description": "Name of group to group toggle switches in. Default: `\"\"`.", "name": "group", "type": "string"}, {"description": "Whether to make the switch selected. Use `true` to enable. Default: `false`.", "name": "selected", "type": "boolean"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"checkbox\"` and `role` as `\"switch\"`."}, "ui.components.Paragraph": {"shortDescription": "Paragraph class, extends `ui.components.Component`.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `p` element."}, "ui.components.Pill": {"shortDescription": "Pill class, extends `ui.components.Component`.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Whether to make the pill selected. Use `true` to enable. Default: `false`.", "name": "selected", "type": "boolean"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `button` element with attribute `role` as `\"tab\"`."}, "ui.components.RadioButtonInput": {"shortDescription": "RadioButtonInput class, extends `ui.components.Component`.", "params": [{"description": "Name of group to group radio buttons in. Default: `\"\"`.", "name": "group", "type": "string"}, {"description": "Whether to make the input selected. Use `true` to enable. Default: `false`.", "name": "selected", "type": "boolean"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"radio\"`."}, "ui.components.TextBoldEffect": {"shortDescription": "TextBoldEffect class, extends `ui.components.Component`.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Displays text in bold. Has similar properties to an HTML `strong` element."}, "ui.components.TextItalicsEffect": {"shortDescription": "TextItalicsEffect class, extends `ui.components.Component`.", "params": [{"description": "Children or content to include in component. Default: `[]`.", "name": "children", "type": "any"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Displays text in italics. Has similar properties to an HTML `em` element."}, "ui.components.Image": {"shortDescription": "Image class, extends `ui.components.Component`.", "params": [{"description": "Source that image is taken from.", "name": "source", "type": "string"}, {"description": "Alternative description of image if it doesn't load or can't be seen by the user. Default: `\"\"`.", "name": "description", "type": "string"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`.", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `img` element."}, "ui.components.Component( ... ).generateDOMElement": {"shortDescription": "Generate DOM element for component.", "params": [], "return": {"type": "object", "description": "Dictionary of available functions and values for generated DOM element."}, "longDescription": ""}, "ui.components.SelectionInput": {"shortDescription": "SelectionInput class, extends `ui.components.Component`.", "params": [{"description": "Candidates to display in input. Default: `{}`.", "name": "candidates", "type": "object"}, {"description": "Candidate key for selected candidate. Default: `\"\"`.", "name": "selected", "type": "string"}, {"description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "name": "secondary", "type": "boolean"}, {"description": "Styling to use on component. Default: `{}`.", "name": "style", "type": "object"}, {"description": "HTML attributes to use on component. Default: `{}`.", "name": "attributes", "type": "object"}, {"description": "Events to listen to on component. Default: `{}`", "name": "events", "type": "object"}], "return": {}, "longDescription": "Has similar properties to an HTML `select` element with `option` children.\nHas similar properties to an HTML `select` element with children as element `option`."}}