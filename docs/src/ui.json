{"ui.components.Component": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "Blank component class.", "longDescription": ""}, "ui.components.Button": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Whether to make the button secondary. Use `true` to enable. Default: `false`.", "type": "boolean", "name": "secondary"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "Button class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `button` element."}, "ui.events.loaded": {"params": [{"description": "Callback function to call when main UI container has loaded.", "type": "function", "name": "callback"}], "return": {}, "shortDescription": "Call callback function when main UI container has loaded.", "longDescription": ""}, "ui.components.HTML": {"params": [{"description": "HTML contents to use. Default: `\"\"`.", "type": "text", "name": "html"}], "return": {}, "shortDescription": "HTML class, extends `ui.components.Component`.", "longDescription": ""}, "ui.components.Component( ... ).generateDOMElement": {"params": [], "return": {"description": "Dictionary of available functions and values for generated DOM element.", "type": "object"}, "shortDescription": "Generate DOM element for component.", "longDescription": ""}, "ui.components.Heading": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Level number to use for heading. Must be an integer between 1 and 6 inclusive. Default: `1`.", "type": "number", "name": "level"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "Heading class, extends `ui.components.Component`.", "longDescription": "Has similar properties to the HTML `h1`, `h2`, `h3`, `h4`, `h5` and `h6` elements."}, "ui.components.GroupContainer": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "GroupContainer class, extends `ui.components.Container`.", "longDescription": "Has similar properties to an HTML `div` element with attribute `group`.\nDesigned to group alike form elements already in a `Container`."}, "ui.components.Paragraph": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "Paragraph class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `p` element."}, "ui.components.TextCode": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "TextCode class, extends `ui.components.Component`.", "longDescription": "Displays text in italics. Has similar properties to an HTML `code` element."}, "ui.components.SelectionInput": {"params": [{"description": "Candidates to display in input. Default: `{}`.", "type": "object", "name": "candidates"}, {"description": "Candidate key for selected candidate. Default: `\"\"`.", "type": "string", "name": "selected"}, {"description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "type": "boolean", "name": "secondary"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`", "type": "object", "name": "events"}], "return": {}, "shortDescription": "SelectionInput class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `select` element with `option` children.\nHas similar properties to an HTML `select` element with children as element `option`."}, "ui.Vector": {"params": [{"description": "position or width of vector.", "type": "X", "name": "x"}, {"description": "position or height of vector.", "type": "Y", "name": "y"}], "return": {}, "shortDescription": "Vector class for use with dimensions in terms of position and size.", "longDescription": ""}, "ui.components.TextBoldEffect": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "TextBoldEffect class, extends `ui.components.Component`.", "longDescription": "Displays text in bold. Has similar properties to an HTML `strong` element."}, "ui.components.SpinnerLoader": {"params": [{"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "SpinnerLoader class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `div` element with attribute `loader`.\nUsed for when an object has no definite final loading time."}, "ui.components.Link": {"params": [{"description": "Text to use in link. Default: `\"\"`.", "type": "string", "name": "text"}, {"description": "Destination that link goes to. Default: `\"#\"`.", "type": "string", "name": "destination"}, {"description": "Whether to make link destination open in new window or browser tab. Default: `true`.", "type": "boolean", "name": "detach"}], "return": {}, "shortDescription": "Link class, extends `ui.components.Component`.", "longDescription": ""}, "ui.components.ProgressBar": {"params": [{"description": "Initial value to store in input. Must be between 0 and 1 inclusive. Default: `0`.", "type": "number", "name": "value"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "ProgressBar class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `progress` element."}, "ui.components.OrderedList": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "OrderedList class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `ol` element."}, "ui.components.Label": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "Label class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `label` element."}, "ui.components.CheckboxInput": {"params": [{"description": "Name of group to group checkboxes in. Default: `\"\"`.", "type": "string", "name": "group"}, {"description": "Whether to make the input selected. Use `true` to enable, or `null` to make indeterminate. Default: `false`.", "type": "boolean", "name": "selected"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "CheckboxInput class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"checkbox\"`."}, "ui.components.FormattedInput": {"params": [{"description": "Format that input should be in. Default: `ui.enums.formats.TEXT`.", "type": "number", "name": "format"}, {"description": "Initial value to store in input. Default: `\"\"`.", "type": "string", "name": "value"}, {"description": "Value to show in input if it is empty. Default: `\"\"`.", "type": "string", "name": "placeholder"}, {"description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "type": "boolean", "name": "secondary"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "FormattedInput class, extends `ui.components.TextInput`.", "longDescription": "Has similar properties to an HTML `input` element."}, "ui.components.MultilineTextInput": {"params": [{"description": "Initial value to store in input. Default: `\"\"`.", "type": "string", "name": "value"}, {"description": "Value to show in input if it is empty. Default: `\"\"`.", "type": "string", "name": "placeholder"}, {"description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "type": "boolean", "name": "secondary"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "MultilineTextInput class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `textarea` element."}, "ui.components.UnorderedList": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "UnorderedList class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `ul` element."}, "ui.events.resized": {"params": [{"description": "Callback function to call when screen has resized.", "type": "function", "name": "callback"}], "return": {}, "shortDescription": "Call callback function when screen has resized.", "longDescription": ""}, "ui.components.RadioButtonInput": {"params": [{"description": "Name of group to group radio buttons in. Default: `\"\"`.", "type": "string", "name": "group"}, {"description": "Whether to make the input selected. Use `true` to enable. Default: `false`.", "type": "boolean", "name": "selected"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "RadioButtonInput class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"radio\"`."}, "ui.components.PasswordInput": {"params": [{"description": "Initial value to store in input. Default: `\"\"`.", "type": "string", "name": "value"}, {"description": "Value to show in input if it is empty. Default: `\"\"`.", "type": "string", "name": "placeholder"}, {"description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "type": "boolean", "name": "secondary"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "PasswordInput class, extends `ui.components.TextInput`.", "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"password\"`."}, "ui.components.ToggleSwitch": {"params": [{"description": "Name of group to group toggle switches in. Default: `\"\"`.", "type": "string", "name": "group"}, {"description": "Whether to make the switch selected. Use `true` to enable. Default: `false`.", "type": "boolean", "name": "selected"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "ToggleSwitch class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"checkbox\"` and `role` as `\"switch\"`."}, "ui.components.TextItalicsEffect": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "TextItalicsEffect class, extends `ui.components.Component`.", "longDescription": "Displays text in italics. Has similar properties to an HTML `em` element."}, "ui.utilities.getScreenSize": {"params": [], "return": {"description": "Vector class of screen size.", "type": "object"}, "shortDescription": "Get the screen (viewport)'s size in pixels.", "longDescription": ""}, "ui.components.ListItem": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "ListItem class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `li` element."}, "ui.components.CodeBlock": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "CodeBlock class, extends `ui.components.Component`.", "longDescription": "Displays text in italics. Has similar properties to an HTML `pre` element."}, "ui.refresh": {"params": [], "return": {}, "shortDescription": "Regenerate the DOM to reflect the UI layout in `ui.screen`.", "longDescription": ""}, "ui.components.Text": {"params": [{"description": "Text to use. Default: `\"\"`.", "type": "string", "name": "text"}], "return": {}, "shortDescription": "Text class, extends `ui.components.Component`.", "longDescription": ""}, "ui.components.Icon": {"params": [{"description": "Name of icon to use.", "type": "string", "name": "name"}, {"description": "Description of icon for accessibility. If blank, the icon will not be read out by screen readers. Default: `\"\"`.", "type": "string", "name": "description"}], "return": {}, "shortDescription": "Icon class, extends `ui.components.Component`.", "longDescription": "Uses icons from from the Clarity icon set. An `i` element is generated."}, "ui.components.Component( ... ).precompute": {"params": [{"description": "DOM object to use for precomputing.", "type": "object", "name": "domObject"}], "return": {"description": "Newly computed DOM object.", "type": "object"}, "shortDescription": "Precompute DOM values for generation.", "longDescription": ""}, "ui.colour.RGBA": {"params": [{"description": "Amount of red to use in colour. Must be between 0 and 255 inclusive.", "type": "number", "name": "red"}, {"description": "Amount of green to use in colour. Must be between 0 and 255 inclusive.", "type": "number", "name": "green"}, {"description": "Amount of blue to use in colour. Must be between 0 and 255 inclusive.", "type": "number", "name": "blue"}, {"description": "Amount of alpha transparency colour should have. Must be between 0 and 1 inclusive. Default: `1`.", "type": "number", "name": "alpha"}], "return": {}, "shortDescription": "RGBA class for use with colours.", "longDescription": ""}, "ui.components.Card": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Numerator of a twelth fraction used to split card by width. Must be between 1 and 12 inclusive. Default: `12`.", "type": "number", "name": "split"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "Card class, extends `ui.components.Container`.", "longDescription": "Has similar properties to an HTML `div` element with attribute `card`.\nDesigned to hold elements in a more contextual setting."}, "ui.components.TextInput": {"params": [{"description": "Initial value to store in input. Default: `\"\"`.", "type": "string", "name": "value"}, {"description": "Value to show in input if it is empty. Default: `\"\"`.", "type": "string", "name": "placeholder"}, {"description": "Whether to make the input secondary. Use `true` to enable. Default: `false`.", "type": "boolean", "name": "secondary"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "TextInput class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `input` element."}, "ui.components.SliderInput": {"params": [{"description": "Initial value to store in input. Must be between 0 and 1 inclusive. Default: `0`.", "type": "number", "name": "value"}, {"description": "Amount to step when slider is moved. Must be between 0 and 1 inclusive. Default: `1`.", "type": "number", "name": "step"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "SliderInput class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `input` element with attribute `type` as `\"range\"`."}, "ui.components.Image": {"params": [{"description": "Source that image is taken from.", "type": "string", "name": "source"}, {"description": "Alternative description of image if it doesn't load or can't be seen by the user. Default: `\"\"`.", "type": "string", "name": "description"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "Image class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `img` element."}, "ui.components.Pill": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Whether to make the pill selected. Use `true` to enable. Default: `false`.", "type": "boolean", "name": "selected"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "Pill class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `button` element with attribute `role` as `\"tab\"`."}, "ui.components.Component( ... ).generateHTML": {"params": [], "return": {"description": "HTML contents of component.", "type": "string"}, "shortDescription": "Generate HTML contents for component.", "longDescription": ""}, "ui.components.Container": {"params": [{"description": "Children or content to include in component. Default: `[]`.", "type": "any", "name": "children"}, {"description": "Numerator of a twelth fraction used to split container by width. Must be between 1 and 12 inclusive. Default: `12`.", "type": "number", "name": "split"}, {"description": "Styling to use on component. Default: `{}`.", "type": "object", "name": "style"}, {"description": "HTML attributes to use on component. Default: `{}`.", "type": "object", "name": "attributes"}, {"description": "Events to listen to on component. Default: `{}`.", "type": "object", "name": "events"}], "return": {}, "shortDescription": "Container class, extends `ui.components.Component`.", "longDescription": "Has similar properties to an HTML `div` element."}}